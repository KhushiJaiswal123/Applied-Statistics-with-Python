{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Examples\"\n",
        "toc-title: \"Overview\"\n",
        "toc-location: left\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Worked Examples\n",
        "\n",
        "::: {.callout-tip collapse=false}\n",
        "## Contents\n",
        "- [Exploratory Data Analysis](#EDA)\n",
        "- [Data Modelling](#Modelling)\n",
        ":::\n",
        "\n",
        "This section contains worked examples, most of them with fully annotated Python code that you can use as reference.\n",
        "\n",
        "### Exploratory Data Analysis {#EDA .unnumbered .unlisted}\n",
        "Before starting any analysis, we first need to import a dataset, understand its variables, visualize it, and manipulate it systematically using tools like `pandas`, `matplotlib`, and `seaborn.` This might seem like a tedious step, but it's a critical foundation that must precede any form of statistical modelling.\n",
        "\n",
        "### Data Modelling {#Modelling .unnumbered .unlisted}\n",
        "Data modelling allows us to move beyond describing individual variables — instead, we use models to learn from data. At the core of this is understanding the relationship:\n",
        "```python\n",
        "# General form of a predictive model\n",
        "outcome = f(features) + error\n",
        "\n",
        "```\n",
        "We begin with Exploratory Data Analysis tailored for modelling, and then proceed with three key approaches:\n",
        "\n",
        "1. **EDA for Modelling**\n",
        "After importing and cleaning the data (using pandas), we start looking at summary statistics and plots that will be useful in framing our modelling approach\n",
        "\n",
        "2. **Testing for Differences in Means** across samples: How do we know whether there is a **statistically significant difference** between two groups A and B? E.g., between those who took a drug versus those than a placebo? Or whether there is a difference in the percentage of people who approve of Donald Trump is lower than those who disapprove of him?\n",
        "\n",
        "3. **Fitting a Linear Regression Model**\n",
        "To understand which features are associated with a numerical outcome **Y**, we use Linear Regression from `scikit-learn`.\n",
        "    We try to explain the effect that specific explanatory variables, **X**, have on **Y**\n",
        "\n",
        "4. **Fitting a Binary Classification Model**\n",
        "where the difference is that the outcome variable, **Y**, is binary (0/1). Again we want to use our model primarily for explanation, e.g., what is the effect of different explanatory variables **X**'s on e.g., the probability that someone with Covid-19 will die?\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "# **Exploratory Data Analysis**\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "## 1. Import Data\n",
        "::: {.callout-tip collapse=false}\n",
        "## Contents\n",
        "- [Overview](#overview)\n",
        "    - [Importing CSV files: pandas.read_csv()](#importing)\n",
        "    - [Importing CSV files saved locally](#localImport)\n",
        "- [Need for speed: `dask` and `vaex`](#speed)\n",
        "- [Other data formats](#OtherFormats)\n",
        "- [Never work directly on the raw data](#rawData)\n",
        "- [other Links](#otherLinks)\n",
        "\n",
        ":::\n",
        "\n",
        "> Learning Objectives\n",
        ">\n",
        "> 1. Load external data from a .csv file into a data frame.\n",
        ">\n",
        "> 2. Describe what a data frame is.\n",
        ">\n",
        "> 3. Use indexing to subset specific portions of data frames.\n",
        ">\n",
        "> 4. Describe what a factor is.\n",
        ">\n",
        "> 5. Reorder and rename factors.\n",
        ">\n",
        "> 6. Format dates.\n",
        "\n",
        "\n",
        "### Overview {#overview .unnumbered .unlisted}\n",
        "\n",
        "When working with Python, data importation is generally achieved using libraries like `pandas`, which provides powerful tools for data manipulation, including importing data from various file formats.\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Importing CSV files: pandas.read_csv() {#importing .unnumbered .unlisted}\n",
        "\n",
        "CSV files can be imported using the `read_csv()` function from the `pandas` library. This function is fast and user-friendly, allowing you to read flat data without complex configurations.\n",
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "# Importing CSV file from a URL\n",
        "url = \"https://data.giss.nasa.gov/gistemp/tabledata_v4/NH.Ts+dSST.csv\"\n",
        "weather = pd.read_csv(url, skiprows=1, na_values=\"***\")\n",
        "```\n",
        "Options Used:\n",
        "  * `skiprows=1`: This skips the first row, assuming the actual data starts from the second row.\n",
        "  * `na_values= \"***\"` : This treats astriks' as missing values, converting them to NaN.\n",
        "\n",
        "To view the structure of the dataframe, you can use:\n",
        "```python\n",
        "print(weather.info())\n",
        "print(weather.head())\n",
        "```\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Importing CSV files saved locally {#localImport .unnumbered .unlisted}\n",
        "\n",
        "To import a CSV file saved locally, simply provide the file path to the `read_csv()` function:\n",
        "```python \n",
        "weather_local = pd.read_csv(\"path/to/your/localfile.csv\")\n",
        "```\n",
        "\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Need for speed: `dask` and `vaex` {#speed .unnumbered .unlisted}\n",
        "For handling large datasets, libraries like dask and vaex can be used, which offer faster data processing capabilities compared to pandas.\n",
        "```python \n",
        "import dask.dataframe as dd\n",
        "\n",
        "weather_large = dd.read_csv(\"path/to/largefile.csv\")\n",
        "```\n",
        "\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Other data formats {#OtherFormats .unnumbered .unlisted}\n",
        "\n",
        "Python offers several libraries for reading and writing various data formats:\n",
        "\n",
        "  * Excel files: `pandas.read_excel()`\n",
        "  * JSON: `json` library\n",
        "  * Web APIs: `requests` library\n",
        "  * Databases: `sqlite3`\n",
        "  * Big Data: `pyspark`\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Never work directly on the raw data {#rawData .unnumbered .unlisted}\n",
        "\n",
        "In 2012 Cecilia Giménez, an 83-year-old widow and amateur painter, attempted to restore a century-old fresco of Jesus crowned with thorns in her local church in Borja, Spain. The restoration didn’t go very well, but, surprisingly, the [botched restoration of Jesus fresco miraculously saved the Spanish Town](https://news.artnet.com/art-world/botched-restoration-of-jesus-fresco-miraculously-saves-spanish-town-197057).\n",
        "\n",
        "![](Images/raw_data_example.png)\n",
        "\n",
        "As a most important rule, please do not work on the raw data; it’s unlikely you will have Cecilia Giménez’s good fortune to become (in)famous for your not-so-brilliant work.\n",
        "\n",
        "\n",
        "Make sure you always work on a copy of your raw data. Use Python's data manipulation libraries to clean and transform your data, and save the results to a new file, ensuring the original data remains intact.\n",
        "```python \n",
        "weather_cleaned = weather.dropna()  # Example of cleaning data\n",
        "weather_cleaned.to_csv(\"cleaned_data.csv\", index=False)\n",
        "```\n",
        "\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Other Links {#otherLinks .unnumbered .unlisted}\n",
        "\n",
        "  * [For Big-Data Scientists, ‘Janitor Work’ Is Key Hurdle to Insights](https://www.nytimes.com/2014/08/18/technology/for-big-data-scientists-hurdle-to-insights-is-janitor-work.html)\n",
        "  * Data Wrangling with `pandas`: [Pandas Documentation](https://pandas.pydata.org/docs/)\n",
        "  * Big Data Processing with `dask` and `vaex`: [Dask Documentation](https://dask.org/), [Vaex Documentation](https://vaex.io/docs/)\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "## 2. Inspect Data\n",
        "::: {.callout-tip collapse=false}\n",
        "## Contents\n",
        "- [Overview](#overviewof2)\n",
        "- [Viewing Data](#viewing)\n",
        "- [Detailed Inspection](#inspections)\n",
        "- [Key Questions](#questions)\n",
        "\n",
        ":::\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Overview {#overviewof2 .unnumbered .unlisted}\n",
        "Once you have loaded your dataset into Python, it's essential to inspect and understand the data. Typically, you want to know:\n",
        "\n",
        "  * The dimensions of the dataset (number of rows and columns).\n",
        "  * The types of variables (integer, string, boolean, etc.).\n",
        "  * The number of missing values.\n",
        "  * Summary statistics for numeric data.\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Viewing Data {#viewing .unnumbered .unlisted}\n",
        "\n",
        "In Python, you can use pandas to view and inspect your data. The pandas library provides several functions to achieve this.\n",
        "\n",
        "`pandas.DataFrame.info()` and `pandas.DataFrame.describe()`\n",
        "\n",
        "These functions help you understand the structure and summary statistics of your data.\n",
        "\n",
        "```python \n",
        "import pandas as pd\n",
        "\n",
        "# Load data\n",
        "gapminder = pd.read_csv(\"path/to/gapminder.csv\")\n",
        "\n",
        "# View the structure of the dataframe\n",
        "print(gapminder.info())\n",
        "\n",
        "# Summary statistics\n",
        "print(gapminder.describe())\n",
        "```\n",
        "\n",
        "Using `info()`: Provides the number of rows, columns, and data types of each column. Using `describe()` : Offers summary statistics for numeric columns, including count, mean, standard deviation, min, and max values.\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Detailed Inspection {#inspections .unnumbered .unlisted}\n",
        "\n",
        "For a detailed inspection, you can use the pandas_profiling library, which provides an extensive report on your dataframe.\n",
        "\n",
        "```python \n",
        "from pandas_profiling import ProfileReport\n",
        "\n",
        "# Generate a report\n",
        "profile = ProfileReport(gapminder)\n",
        "profile.to_file(\"gapminder_report.html\")\n",
        "```\n",
        "\n",
        "Example Analysis on London Bikes Data\n",
        "```python \n",
        "bikes = pd.read_csv(\"path/to/londonBikes.csv\")\n",
        "\n",
        "# Use pandas_profiling for a detailed report\n",
        "bikes_profile = ProfileReport(bikes)\n",
        "bikes_profile.to_file(\"london_bikes_report.html\")\n",
        "```\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Key Questions {#questions .unnumbered .unlisted}\n",
        "\n",
        "using the **London Bikes Data** from above\n",
        "\n",
        "1. What kind of variable is **date**?\n",
        "    * date is typically a string or datetime variable. You can convert it using `pd.to_datetime()`.\n",
        "    \n",
        "    ```python\n",
        "    bikes['date'] = pd.to_datetime(bikes['date'])\n",
        "    ```\n",
        "2. What kind of variable is **season**?\n",
        "    * season is likely a categorical variable. You can convert it using `pd.Categorical()`.\n",
        "    \n",
        "    ```python \n",
        "    bikes['season'] = pd.Categorical(bikes['season'])\n",
        "    ```\n",
        "\n",
        "3. How often does it rain in London?\n",
        "    * Count the occurrences in the rain column.\n",
        "    \n",
        "    ```python \n",
        "    rain_count = bikes['rain'].sum()\n",
        "print(f\"It rains {rain_count} times in the dataset.\")\n",
        "```\n",
        "\n",
        "4. What is the average annual temperature (in degrees C)?\n",
        "    * Calculate the mean of the temperature columns.\n",
        "    \n",
        "    ```python \n",
        "    avg_temp = bikes[['max_temp', 'min_temp', 'avg_temp']].mean().mean()\n",
        "print(f\"The average annual temperature is {avg_temp:.2f} degrees C.\")\n",
        "```\n",
        "\n",
        "5. What is the maximum rainfall?\n",
        "    * Find the maximum value in the `rainfall_mm` column.\n",
        "    \n",
        "    ```python\n",
        "    max_rainfall = bikes['rainfall_mm'].max()\n",
        "print(f\"The maximum rainfall recorded is {max_rainfall} mm.\")\n",
        "    ```\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "## 3. Clean Data\n",
        "::: {.callout-tip collapse=false}\n",
        "## Contents\n",
        "- [Overview](#overviewof3)\n",
        "- [Cleaning Variable Names with pandas](#cleaning)\n",
        "- [Code Quality](#codeQUality)\n",
        "- [Other Links](#otherLinks)\n",
        "\n",
        ":::\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Overview {#overviewof3 .unnumbered .unlisted}\n",
        "\n",
        "When creating data files, it's common to use variable names and formats that are human-readable but not ideal for computational processing. In Python, the `pandas` library can be used to clean and standardise variable names for easier manipulation.\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Cleaning Variable Names with pandas {#cleaning .unnumbered .unlisted}\n",
        "\n",
        "In `Python`, we can use pandas and custom code to read data and clean column names to make them more suitable for analysis.\n",
        "```python \n",
        "import pandas as pd\n",
        "\n",
        "# Load Excel file\n",
        "roster = pd.read_excel(\"path/to/dirty_data.xlsx\")\n",
        "\n",
        "# Clean column names using pandas string methods\n",
        "roster.columns = (\n",
        "    roster.columns\n",
        "        .str.strip()  # Remove leading and trailing spaces\n",
        "        .str.lower()  # Convert to lowercase\n",
        "        .str.replace(' ', '_')  # Replace spaces with underscores\n",
        "        .str.replace('%', 'percent')  # Replace '%' with 'percent'\n",
        "        .str.replace('[^a-zA-Z0-9_]', '', regex=True)  # Remove special characters\n",
        ")\n",
        "\n",
        "# Inspect cleaned dataframe\n",
        "print(roster.head())\n",
        "\n",
        "```\n",
        "\n",
        "  * The custom code directly modifies the column names using pandas string methods. It removes spaces, converts to lowercase, replaces spaces with underscores, and removes special characters using a regular expression.\n",
        "  * Regular Expression: [^a-zA-Z0-9_] is used to remove any character that is not alphanumeric or an underscore.\n",
        "  * `pandas.read_excel()`: Used to read Excel files into a DataFrame.\n",
        "\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Code Quality {#codeQUality .unnumbered .unlisted}\n",
        "\n",
        "According to Phil Karlton, there are only two [hard things in Computer Science: cache invalidation and naming things](https://martinfowler.com/bliki/TwoHardThings.html). It's crucial to write code that is not only functional but also maintainable and readable. Use meaningful names for variables and dataframes, and include comments to explain complex logic.\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Other Links {#otherLinks .unnumbered .unlisted}\n",
        "\n",
        "* [For Big-Data Scientists, ‘Janitor Work’ Is Key Hurdle to Insights](https://www.nytimes.com/2014/08/18/technology/for-big-data-scientists-hurdle-to-insights-is-janitor-work.html)\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "## 4. Visualise Data\n",
        "::: {.callout-tip collapse=false}\n",
        "## Contents\n",
        "- [Overview](#overviewof4)\n",
        "- [Layers](#layers)\n",
        "- [Faucetting](#faucetting)\n",
        "- [Animated Graphs](#animated)\n",
        "    - [matplotlib](#matplotLibrary)\n",
        "- [Why you should always plot your data](#whyPlot)\n",
        "- [Further resources](#furtherResources4)\n",
        "\n",
        ":::\n",
        "<!--#################################################-->\n",
        "\n",
        "> Learning Objectives\n",
        "\n",
        "> 1. Produce scatter plots, boxplots, and time series plots using matplotlib and seaborn.\n",
        "> 2. Set universal plot settings.\n",
        "> 3. Describe what faceting is and apply faceting using seaborn\n",
        "> 4. Modify the aesthetics of an existing plot (including axis labels and colour).\n",
        "> 5. Build complex and customised plots from data in a DataFrame.\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Overview {#overviewof4 .unnumbered .unlisted}\n",
        "\n",
        "> “Visualization is a powerful tool for understanding data. You can often discover patterns, spot anomalies, and develop an intuition for the data just by looking at it.”  \n",
        ">  \n",
        "> — Wes McKinney, creator of pandas  \n",
        "\n",
        "We will explore how to create insightful and aesthetically pleasing data visualisations using two powerful Python libraries: `matplotlib` and `seaborn`.  \n",
        "We will work through examples of various plot types - scatter plots, boxplots, and histograms - and learn to customise them for clarity and impact.  \n",
        "\n",
        "It may seem verbose and unwieldy, but the idea of building a plot on a layer-by-layer basis is very powerful.\n",
        "\n",
        "* You begin a plot by defining the dataset you will use. \n",
        "* Then, specify aesthetics, namely (x, y) coordinates, colour, size, etc. \n",
        "* Finally, choose the geometric shape to represent your data, and add more layers like legends, labels, facets, etc.\n",
        "\n",
        "For example, using the <a href=\"https://www.kaggle.com/datasets/albertovidalrod/gapminder-dataset?resource=download\" target=\"_blank\">Gapminder dataset</a> with data on life expectancy (life_exp), human development index (hdi_index), and GDP (gdp) for a number of countries, we can build a graph that shows the relationship between GDP and life expectancy.\n",
        "\n",
        "As we said, first we define the dataset we are using\n",
        "```python\n",
        "import pandas as pd\n",
        "gapminder = pd.read_csv(r\"filepath-to-your-dataset\")\n",
        "```\n",
        "\n",
        "The next thing is to map aesthetics. In our case, we will map gdpPercap to the x-axis, and lifeExp to the y-axis.\n",
        "\n",
        "```python \n",
        "# Basic Plot Setup\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=gapminder, x='gdp', y='life_exp')\n",
        "plt.title('Life Expectancy vs GDP')\n",
        "plt.xlabel('GDP')\n",
        "plt.ylabel('Life Expectancy')\n",
        "plt.show()\n",
        "```\n",
        "![](Images/BasicPlotSetup.png)\n",
        "\n",
        "* `plt.figure(figsize=(10, 6))`: Defines the size of the plot.\n",
        "* `sns.scatterplot(...)`: Uses Seaborn to draw a scatter plot from the gapminder dataset.\n",
        "* `plt.title(...)`, `plt.xlabel(...)`, `plt.ylabel(...)`: Add meaningful labels and a title to make the chart easy to understand.\n",
        "* `plt.show()`: Renders the plot in your output window or notebook.\n",
        "\n",
        "\n",
        "What if we wanted to colour the points by the continent each country is in? For this we will need to use the \"continent\" column from our gapminder dataset. Seaborn makes this easy using the hue parameter.\n",
        "\n",
        "\n",
        "```python \n",
        "# Colored Scatter Plot by Continent\n",
        "plt.figure(figsize=(10, 6))  # Set figure size\n",
        "sns.scatterplot(data=gapminder, x='gdp', y='life_exp', hue='continent')  # Color points by continent\n",
        "plt.title('Life Expectancy vs GDP by Continent')  # Updated title\n",
        "plt.xlabel('GDP')\n",
        "plt.ylabel('Life Expectancy')\n",
        "plt.legend(title='Continent')  # Add a legend with a title\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "![](Images/ColouredScatterPlot.png)\n",
        "\n",
        "* `hue='continent'`: Tells Seaborn to color the points based on the continent each country belongs to.\n",
        "* `plt.legend(...)`: Makes sure the legend is clear and labeled.\n",
        "\n",
        "What if instead of a scatter plot we wanted to create a line plot? For this we need to: \n",
        "\n",
        "* change the `sns.scatterplot` to `sns.lineplot`\n",
        "\n",
        "\n",
        "```python \n",
        "# Colored Line Plot by Continent\n",
        "plt.figure(figsize=(10, 6))  # Set figure size\n",
        "sns.lineplot(data=gapminder, x='gdp', y='life_exp', hue='continent')  # Color points by continent\n",
        "plt.title('Life Expectancy vs GDP by Continent')  # Updated title\n",
        "plt.xlabel('GDP')\n",
        "plt.ylabel('Life Expectancy')\n",
        "plt.legend(title='Continent')  # Add a legend with a title\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "\n",
        "![](Images/LineGraph.png)\n",
        "\n",
        "However, this is not a particularly useful plot, so let us go back to our scatter plot.\n",
        "\n",
        "What if we wanted to have the size of each point correspond to the HDI index of the country?\n",
        "For this we will :\n",
        "\n",
        "* add the `size='hdi_index'` parameter in the `scatterplot()` function\n",
        "* add the `sizes=(20, 200)` parameter in the `scatterplot()` function to specify the range of sizes of scatter points we want to use. \n",
        "\n",
        "```python\n",
        "# going back to scatter plot but now the size of points coresspond to the population of the country\n",
        "# Basic Plot Setup with size mapped to population\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(\n",
        "    data=gapminder,\n",
        "    x='gdp',\n",
        "    y='life_exp',\n",
        "    size='hdi_index',                  # map size to population\n",
        "    sizes=(20, 200),             # scale point size (min, max)\n",
        ")\n",
        "\n",
        "plt.title('Life Expectancy vs GDP (Point Size = hdi_index)')\n",
        "plt.xlabel('GDP')\n",
        "plt.ylabel('Life Expectancy')\n",
        "plt.legend(title='hdi_index', loc='upper left', bbox_to_anchor=(1, 1))\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "![](Images/hdi_index.png)\n",
        "But the points above are overlapping with each other. We can set the `alpha` variable between 0 and 1 to specify how transparent each point will be. This will let us see all the points better.\n",
        "\n",
        "```python \n",
        "# Adding Alpha\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(\n",
        "    data=gapminder,\n",
        "    x='gdp',\n",
        "    y='life_exp',\n",
        "    size='hdi_index',                  # map size to population\n",
        "    sizes=(20, 200),             # scale point size (min, max)\n",
        "    alpha=0.4                    # make points a bit transparent\n",
        ")\n",
        "\n",
        "plt.title('Life Expectancy vs GDP (Point Size = hdi_index)')\n",
        "plt.xlabel('GDP')\n",
        "plt.ylabel('Life Expectancy')\n",
        "plt.legend(title='hdi_index', loc='upper left', bbox_to_anchor=(1, 1))\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "```\n",
        "![](Images/Alpha.png)\n",
        "\n",
        "Our graph is still not very clear after adding the `alpha` this is because all the points are bunched up in only a small section of the graph. We can *log* the x-axis to make the points more spread out across the GDP axis.\n",
        "\n",
        "```python \n",
        "# Logging the axis\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(\n",
        "    data=gapminder,\n",
        "    x='gdp',\n",
        "    y='life_exp',\n",
        "    size='hdi_index',                  # map size to population\n",
        "    sizes=(20, 200),             # scale point size (min, max)\n",
        "    alpha=0.4                    # make points a bit transparent\n",
        ")\n",
        "\n",
        "plt.title('Life Expectancy vs GDP (Point Size = hdi_index)')\n",
        "plt.xlabel('GDP')\n",
        "plt.ylabel('Life Expectancy')\n",
        "plt.legend(title='hdi_index', loc='upper left', bbox_to_anchor=(1, 1))\n",
        "plt.tight_layout()\n",
        "plt.xscale('log')\n",
        "plt.show()\n",
        "\n",
        "```\n",
        "![](Images/AxisLogged.png)\n",
        "We will now add the colour by continent parameter back. \n",
        "\n",
        "For this notice that we are splitting the legends' code into 2 separate sections. \n",
        "```python \n",
        "# Adding color by continent parameter back \n",
        "plt.figure(figsize=(10, 6))\n",
        "scatter = sns.scatterplot(\n",
        "    data=gapminder,\n",
        "    x='gdp',\n",
        "    y='life_exp',\n",
        "    size='hdi_index',                  # map size to population\n",
        "    sizes=(20, 200),             # scale point size (min, max)\n",
        "    alpha=0.4,                       # make points a bit transparent\n",
        "    hue='continent'\n",
        ")\n",
        "plt.title('Life Expectancy vs GDP (Point Size = hdi_index)')\n",
        "plt.xlabel('GDP per capita (USD)')\n",
        "plt.ylabel('Life Expectancy (years)')\n",
        "\n",
        "# Separate legends for hue and size\n",
        "plt.legend(title='hdi_index', loc='upper left', bbox_to_anchor=(1, 1))\n",
        "sns.move_legend(scatter, title='Continent', loc='upper left', bbox_to_anchor=(0.7, 0.65))\n",
        "\n",
        "plt.tight_layout # making sure the legends are in the frame\n",
        "plt.xscale('log')\n",
        "plt.show()\n",
        "```\n",
        "![](Images/twoLegends.png)\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Layers {#layers .unnumbered .unlisted}\n",
        "\n",
        "Once you define your data and aesthetics (such as (x, y) coordinates, colour, size, etc.), you can add more layers to modify and enhance your plots.\n",
        "\n",
        "* *Geometric Object*s: These are the graphical objects to be drawn, such as histograms, boxplots, density plots, etc.\n",
        "* *Statistics*: These can be applied to your data, like calculating density or fitting a regression line.\n",
        "* *Position Adjustments*: These modify how elements are placed, such as jittering points or stacking bars.\n",
        "\n",
        "Example: Creating a Base plot - a histogram\n",
        "\n",
        "```python \n",
        "# Histogram with Position Adjustments\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(data=gapminder, x='life_exp', hue='continent', element='step', fill=True, alpha=0.3)\n",
        "plt.title('Histogram of Life Expectancy by Continent')\n",
        "plt.xlabel('Life Expectancy')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "```\n",
        "![](Images/Histogram.png)\n",
        "\n",
        "the \"element\" attribute can be one of \"step\", \"poly\" or \"bars\" depending of what is needed. Try it out yourself.\n",
        "\n",
        "We will now plot a density plot, a smoothed version of a histogram using geom_density; its default position is identity and both plots are equivalent.\n",
        "\n",
        "* A histogram displays the frequency of data within bins, while a density plot represents the probability density function of the data, providing a smoothed continuous curve.\n",
        "* To convert a histogram to a density plot, you typically use `sns.kdeplot`, which computes and plots the kernel density estimate.\n",
        "\n",
        "In our code below, the `kdeplot` function is used to create a density plot, and the `common_norm=False` ensures that the densities for each continent are normalized separately, allowing for a fair comparison of the distribution shapes without being influenced by the differing sizes of the groups.\n",
        "```python \n",
        "# filled Density Plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.kdeplot(data=gapminder, x='life_exp', hue='continent', fill=True, common_norm=False, alpha=0.3)\n",
        "plt.title('Density Plot of Life Expectancy by Continent')\n",
        "plt.xlabel('Life Expectancy')\n",
        "plt.ylabel('Density')\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "![](Images/densityPlot.png)\n",
        "\n",
        "The \"Multiple Parameter\"\n",
        "The multiple Parameter can be set to any of these values: \n",
        "\n",
        "* `layer` - Overlays categories, allowing overlap.\n",
        "* `stack` - Stacks categories cumulatively.\n",
        "* `fill` - Stacks and scales categories to equal height.\n",
        "* `dodge` - Positions categories side by side.\n",
        "\n",
        "e.g. using the dodge version: \n",
        "\n",
        "```python \n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(data=gapminder, x='life_exp', hue='continent', multiple='dodge', alpha=0.3)\n",
        "plt.title('Life Expectancy Distribution by Continent')\n",
        "plt.xlabel('Life Expectancy')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "```\n",
        "![](Images/Dodged.png)\n",
        "<!--#################################################-->\n",
        "\n",
        "### Faucetting {#faucetting .unnumbered .unlisted}\n",
        "\n",
        "Facetting is a powerful technique in data visualisation that allows you to split one plot into multiple plots based on a factor included in the dataset. Python's `seaborn` library provides this functionality.\n",
        "\n",
        "\n",
        "In the Gapminder scatterplot example, we can use faceting to produce one scatter plot for each continent separately, using `FacetGrid.`\n",
        "\n",
        "#### Define the Core Scatter Plot\n",
        "\n",
        "First, let's define the core scatter plot of life expectancy vs GDP and store it in an object for easy reuse:\n",
        "```python \n",
        "# Base graph\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=gapminder, x='gdp', y='life_exp', hue='continent', alpha=0.5)\n",
        "plt.xscale('log')\n",
        "plt.title('Life Expectancy vs GDP per capita, 1998-2002')\n",
        "plt.xlabel('GDP per capita')\n",
        "plt.ylabel('Life Expectancy')\n",
        "plt.show()\n",
        "```\n",
        "![](Images/baseGraph.png)\n",
        "\n",
        "Now, let's add a new layer to our base plot using FacetGrid to facet by continent:\n",
        "```python \n",
        "# Ensure 'continent' is treated as a categorical variable\n",
        "gapminder['continent'] = gapminder['continent'].astype('category')\n",
        "\n",
        "# Facet the scatter plot by continent with hue\n",
        "g = sns.FacetGrid(gapminder, col='continent', col_wrap=3, height=4)\n",
        "g.map_dataframe(sns.scatterplot, x='gdp', y='life_exp', hue='continent', alpha=0.5)\n",
        "g.set_titles(\"{col_name}\")\n",
        "g.set_axis_labels('GDP per capita', 'Life Expectancy')\n",
        "g.add_legend()\n",
        "plt.show()\n",
        "```\n",
        "\n",
        "* `g.map_dataframe(...)`: Maps the sns.scatterplot function to each facet, passing the data explicitly and ensuring that \n",
        "* `hue='continent'` colours the points appropriately in each facet.\n",
        "\n",
        "![](Images/faucetGraph.png)\n",
        "\n",
        "* `FacetGrid`: This is used to create a grid of plots, allowing you to facet by a specified variable (continent in this case).\n",
        "* `col_wrap`: This parameter controls the number of columns in the facet grid, making it adaptable to different screen sizes.\n",
        "* `map`: This method maps a plotting function (sns.scatterplot) to each facet.\n",
        "\n",
        "\n",
        "Finally, if you want to create a boxplot of life expectancy by continent instead of a scatter plot, you can use similar aesthetics with Python libraries like matplotlib and seaborn. The key difference is the type of plot you choose to represent your data.\n",
        "\n",
        "```python \n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.boxplot(data=gapminder, x='continent', y='life_exp', hue='continent')\n",
        "\n",
        "# Add labels and title\n",
        "plt.title(\"Life Expectancy among the continents, 1952-2007\")\n",
        "plt.xlabel(\" \")  # Empty, as the levels of the x-variable are the continents\n",
        "plt.ylabel(\"Life Expectancy\")\n",
        "plt.figtext(0.9, 0.01, \"Source: Gapminder\", horizontalalignment='right')\n",
        "\n",
        "# Apply a minimal theme\n",
        "sns.set_theme(style=\"whitegrid\")\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "```\n",
        "![](Images/boxAndWhiskers.png)\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Animated Graphs {#animated .unnumbered .unlisted}\n",
        "\n",
        "Animated graphs are a powerful way to visualize how data changes over time. In Python, one of the most commonly used tools for creating animations is Matplotlib's `FuncAnimation` class. This function updates a plot frame-by-frame, allowing you to illustrate dynamic processes such as moving trends, changing patterns, or simulations. The final animation can be displayed directly in a notebook or exported as a GIF or video using writers like `pillow` or `ffmpeg.` Keep in mind that generating animations may take a few seconds, especially for longer sequences, as each frame is rendered individually.\n",
        "\n",
        "<!--#################################################-->\n",
        "#### matplotlib.animation {#matplotLibrary .unnumbered .unlisted}\n",
        "\n",
        "To implement animations, we will need to understand the concept of functions in Python. These are *reusable blocks of code that perform specific tasks and can be called with different inputs to produce different outputs*. \n",
        "\n",
        "In the context of animations, a function—like `update()` in the code below - is used to define how each frame of the animation should be rendered based on changing input (e.g., the year). This function is then repeatedly called by FuncAnimation, allowing us to dynamically update the plot for each time step.\n",
        "\n",
        "```python \n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.animation as animation\n",
        "\n",
        "\n",
        "# Set up the figure and axis\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Get unique years sorted\n",
        "years = sorted(gapminder['year'].unique())\n",
        "\n",
        "def update(year_index):\n",
        "    ax.clear()  # Clear previous frame\n",
        "    year = years[year_index]\n",
        "    yearly_data = gapminder[gapminder['year'] == year]\n",
        "\n",
        "    # Create boxplot grouped by continent\n",
        "    yearly_data.boxplot(column='life_exp', by='continent', ax=ax)\n",
        "\n",
        "    # Customize plot appearance\n",
        "    ax.set_title(f'Life Expectancy by Continent ({year})')\n",
        "    ax.set_xlabel('Continent')\n",
        "    ax.set_ylabel('Life Expectancy')\n",
        "    plt.suptitle('')  # Remove automatic title added by Pandas boxplot\n",
        "\n",
        "# Create animation\n",
        "ani = animation.FuncAnimation(fig, update, frames=len(years), interval=800, repeat=True)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Optional: Save as GIF (requires 'pillow')\n",
        "ani.save('life_expectancy_boxplot.gif', writer='pillow')\n",
        "```\n",
        "\n",
        "![](GIFs/life_expectancy_boxplot.gif)\n",
        "\n",
        "Similarly, we can create an animated visualisation showing the relationship between GDP and life expectancy over time for different countries, segmented by continent.\n",
        "\n",
        "* *X-axis (GDP)*: Logarithmic scale representing each country's GDP.\n",
        "* *Y-axis (Life Expectancy)*: Life expectancy of each country's population.\n",
        "* *Data Points*\n",
        "    * Each point represents a country for a specific year.\n",
        "    * Colour-coded by continent:\n",
        "        * Asia: Red\n",
        "        * Europe: Blue\n",
        "        * Africa: Green\n",
        "        * Americas: Yellow\n",
        "        * Oceania: Purple\n",
        "        * Unknown: Grey\n",
        "* *Animation*\n",
        "    * Displays changes over time, with each frame representing a different year.\n",
        "    * Title updates dynamically to reflect the current year.\n",
        "\n",
        "\n",
        "\n",
        "```python \n",
        "# Fill NaN values in the 'continent' column with a default value\n",
        "gapminder['continent'] = gapminder['continent'].fillna('Unknown')\n",
        "\n",
        "# Set up the figure and axis\n",
        "fig, ax = plt.subplots(figsize=(6, 6))\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Get unique years sorted\n",
        "years = sorted(gapminder['year'].unique())\n",
        "\n",
        "def update(year_index):\n",
        "    ax.clear()  # Clear previous frame\n",
        "    year = years[year_index]\n",
        "    yearly_data = gapminder[gapminder['year'] == year]\n",
        "\n",
        "    # Ensure there are no NaN values in the data used for plotting\n",
        "    yearly_data = yearly_data.dropna(subset=['gdp', 'life_exp'])\n",
        "\n",
        "    # Map continents to colours, handling 'Unknown' as grey\n",
        "    continent_colors = yearly_data['continent'].map({\n",
        "        'Asia': 'red', 'Europe': 'blue', 'Africa': 'green', \n",
        "        'Americas': 'yellow', 'Oceania': 'purple', 'Unknown': 'grey'\n",
        "    }).fillna('grey')  # Fill any remaining NaN values with 'grey'\n",
        "\n",
        "    # Create scatter plot\n",
        "    scatter = ax.scatter(yearly_data['gdp'], yearly_data['life_exp'], \n",
        "                         c=continent_colors, alpha=0.5)\n",
        "\n",
        "    # Customize plot appearance\n",
        "    ax.set_title(f'Year: {year}')\n",
        "    ax.set_xlabel('GDP')\n",
        "    ax.set_ylabel('Life Expectancy')\n",
        "    ax.set_xscale('log')  # Use logarithmic scale for GDP\n",
        "    ax.set_xlim(gapminder['gdp'].min(), gapminder['gdp'].max())\n",
        "    ax.set_ylim(gapminder['life_exp'].min(), gapminder['life_exp'].max())\n",
        "\n",
        "# Create animation\n",
        "ani = animation.FuncAnimation(fig, update, frames=len(years), interval=800, repeat=True)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Optional: Save as GIF (requires 'pillow')\n",
        "ani.save('life_expectancy_vs_gdp.gif', writer='pillow', dpi=80)\n",
        "```\n",
        "![](GIFs/life_expectancy_vs_gdp.gif)\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Why you should always plot your data {#whyPlot .unnumbered .unlisted}\n",
        "\n",
        "We have touched on the basics of **python** visualisations, but in this section we wanted to discuss why one should **always plot the data** and not just rely on tables of summary statistics.\n",
        "\n",
        "Let us consider thirteen datasets all of which have 142 observations of (x,y) values. The table below shows the average value of X and Y, the standard deviation of X and Y, as well as the correlation coefficient between X and Y.\n",
        "\n",
        "| id | n | mean_x | mean_y | sd_x | sd_y | correlation |\n",
        "|:---|:--|:-------|:-------|:-----|:-----|:------------|\n",
        "| 1  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.064      |\n",
        "| 2  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.069      |\n",
        "| 3  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.068      |\n",
        "| 4  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.064      |\n",
        "| 5  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.060      |\n",
        "| 6  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.062      |\n",
        "| 7  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.069      |\n",
        "| 8  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.069      |\n",
        "| 9  | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.069      |\n",
        "| 10 | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.063      |\n",
        "| 11 | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.069      |\n",
        "| 12 | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.067      |\n",
        "| 13 | 142 | 54.3   | 47.8   | 6.82 | 6.9  | -0.066      |\n",
        "\n",
        "Since our datasets contain values for X and Y, we can estimate 13 regression models and plot the values for each of the 13 intercepts and slope for X.\n",
        "\n",
        "![](Images/LinearRegression_with95Confidence.png)\n",
        "\n",
        "If we just looked at either the summary statistics table, or the plots of intercepts and slopes, we may be tempted to conclude that the 13 datasets are either identical or very much alike. However, this is far from the truth, as this is what the 13 individual datasets look like.\n",
        "\n",
        "![](Images/13_correlation_plots.png)\n",
        "\n",
        "You can read more about why you <a href=\"https://www.research.autodesk.com/publications/same-stats-different-graphs/\" target=\"_blank\">should never trust summary statistics alone and should always visualize your data</a>.\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "### Further resources {#furtherResources4 .unnumbered .unlisted}\n",
        "\n",
        "* <a href=\"https://seaborn.pydata.org/tutorial.html\" target=\"_blank\">Official `seaborn` Tutorial</a>\n",
        "* <a href=\"https://matplotlib.org/stable/tutorials/introductory/pyplot.html\" target=\"_blank\">`matplotlib` Pyplot Tutorial</a>\n",
        "* <a href=\"https://www.datacamp.com/courses/introduction-to-data-visualization-with-seaborn?dc_referrer=https%3A%2F%2Fam01-sep24.netlify.app%2F\" target=\"_blank\">DataCamp - Data Visualization with Seaborn</a>\n",
        "* <a href=\"https://www.datacamp.com/courses/introduction-to-data-visualization-with-matplotlib\" target=\"_blank\">Datacamp - Introduction to Data Visualization with Matplotlib</a>\n",
        "* <a href=\"https://seaborn.pydata.org/examples/index.html\" target=\"_blank\">`seaborn` Gallery</a>\n",
        "* <a href=\"https://matplotlib.org/stable/gallery/index.html\" target=\"_blank\">`matplotlib` Examples</a>\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "## 5. Manipulate Data\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "## 6. Reshape Data \n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "## 7. EDA for Modelling\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "# **Statistical Inference**\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "<!--#################################################-->\n",
        "\n",
        "\n",
        "# **Data Modelling**"
      ],
      "id": "0a8db181"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\14khu\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}